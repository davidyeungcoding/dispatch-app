{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Dave/Desktop/VSCode Workspace/personal/dispatch-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./redirect.service\";\nimport * as i3 from \"./socketio.service\";\nimport * as i4 from \"./chat.service\";\nimport * as i5 from \"./edit-account.service\";\nimport * as i6 from \"./user-data.service\";\nexport class AuthService {\n  constructor(http, redirectService, socketioService, chatService, editAccountService, userDataService) {\n    this.http = http;\n    this.redirectService = redirectService;\n    this.socketioService = socketioService;\n    this.chatService = chatService;\n    this.editAccountService = editAccountService;\n    this.userDataService = userDataService;\n    this.api = 'http://localhost:3000/users'; // dev\n    // private api = 'users'; // production\n\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.jwt = new JwtHelperService();\n  } // =====================\n  // || Router Requests ||\n  // =====================\n\n\n  createUser(payload, token) {\n    const validateHeader = this.buildHeader(token);\n    return this.http.post(`${this.api}/create`, payload, validateHeader).pipe(catchError(err => of(err)));\n  }\n\n  authenticateUser(payload) {\n    return this.http.post(`${this.api}/authenticate`, payload, this.httpOptions).pipe(catchError(err => of(err)));\n  }\n\n  validateToken(token) {\n    const validateHeader = {\n      headers: new HttpHeaders({\n        'Authorization': `${token}`\n      })\n    };\n    return this.http.get(`${this.api}/verify-token`, validateHeader).pipe(catchError(err => of(err)));\n  }\n\n  verifyAdmin(id, token) {\n    const validateHeader = this.buildHeader(token);\n    return this.http.post(`${this.api}/verify-admin`, id, validateHeader).pipe(catchError(err => of(err)));\n  }\n\n  onLogout(id) {\n    return this.http.get(`${this.api}/logout?_id=${id}`).pipe(catchError(err => of(err)));\n  }\n\n  // ======================\n  // || Helper Functions ||\n  // ======================\n  buildHeader(token) {\n    const validateHeader = {\n      headers: new HttpHeaders({\n        'Authorization': token,\n        'Content-Type': 'application/json'\n      })\n    };\n    return validateHeader;\n  }\n\n  adminCheckParser(id, token) {\n    return new Promise(resolve => {\n      this.verifyAdmin({\n        _id: id\n      }, token).subscribe(_status => {\n        if (_status.token) localStorage.setItem('id_token', _status.token);\n        return resolve(_status.status === 200 ? true : false);\n      });\n    });\n  }\n\n  parseLocalStorageUser() {\n    let user = localStorage.getItem('user');\n\n    if (user) {\n      try {\n        user = JSON.parse(user);\n      } catch (_a) {\n        user = null;\n      }\n\n      ;\n    }\n\n    ;\n    return user;\n  }\n\n  compareToken(token) {\n    return new Promise(resolve => {\n      this.validateToken(token).subscribe(res => {\n        if (res.token) this.userDataService.changeAuthToken(res.token);\n        return resolve(res.status === 200 ? true : false);\n      });\n    });\n  }\n\n  // ======================\n  // || Shared Functions ||\n  // ======================\n  setLocalStorageUser(token, user) {\n    localStorage.setItem('id_token', token);\n    localStorage.setItem('user', user);\n  }\n\n  isExpired(token, user) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const expired = _this.jwt.isTokenExpired(token);\n\n      if (!expired) return expired;\n      const expiredCheck = yield new Promise(resolve => {\n        const payload = {\n          user: user,\n          token: token\n        };\n\n        _this.editAccountService.requestNewToken(payload).subscribe(res => {\n          if (!res.success) return resolve(true);\n\n          _this.userDataService.changeAuthToken(res.token);\n\n          return resolve(false);\n        });\n      });\n      return expiredCheck;\n    })();\n  }\n\n  logout(user) {\n    if (user) {\n      this.socketioService.emitLogout(user);\n      this.onLogout(user._id).subscribe(_user => {});\n    }\n\n    ;\n    this.chatService.changeOpenChats([]);\n    this.redirectService.handleRedirect('home');\n    this.userDataService.changeAuthToken(null);\n    this.userDataService.changeUserData(null);\n    localStorage.clear();\n  }\n\n  onReload(user, token) {\n    if (user && token) return;\n    const localUser = this.parseLocalStorageUser();\n    const localToken = localStorage.getItem('id_token');\n\n    if (localUser && localToken) {\n      this.userDataService.changeAuthToken(localStorage.getItem('id_token'));\n      this.userDataService.changeUserData(localUser);\n      this.socketioService.emitLogin(localUser);\n      return;\n    }\n\n    ;\n    this.logout(user);\n  }\n\n  // =======================\n  // || Auth Guard Checks ||\n  // =======================\n  handleDispatchCheck(token, user) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!token) return _this2.redirectService.falseCheckRedirect('home');\n      const valid = yield _this2.compareToken(token);\n      const expired = yield _this2.isExpired(token, user);\n\n      if (expired || !valid) {\n        _this2.logout(user);\n\n        return false;\n      }\n\n      ;\n      return true;\n    })();\n  }\n\n  handleAdminCheck(token, user) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!user || !token) return _this3.redirectService.falseCheckRedirect('home');\n      if (typeof user === 'string') user = JSON.parse(user);\n      const check = yield _this3.adminCheckParser(user._id, token);\n      if (!check) _this3.logout(user);\n      return check;\n    })();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.RedirectService), i0.ɵɵinject(i3.SocketioService), i0.ɵɵinject(i4.ChatService), i0.ɵɵinject(i5.EditAccountService), i0.ɵɵinject(i6.UserDataService));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/Dave/Desktop/VSCode Workspace/personal/dispatch-app/src/app/services/auth.service.ts"],"names":["HttpHeaders","JwtHelperService","catchError","of","i0","i1","i2","i3","i4","i5","i6","AuthService","constructor","http","redirectService","socketioService","chatService","editAccountService","userDataService","api","httpOptions","headers","jwt","createUser","payload","token","validateHeader","buildHeader","post","pipe","err","authenticateUser","validateToken","get","verifyAdmin","id","onLogout","adminCheckParser","Promise","resolve","_id","subscribe","_status","localStorage","setItem","status","parseLocalStorageUser","user","getItem","JSON","parse","_a","compareToken","res","changeAuthToken","setLocalStorageUser","isExpired","expired","isTokenExpired","expiredCheck","requestNewToken","success","logout","emitLogout","_user","changeOpenChats","handleRedirect","changeUserData","clear","onReload","localUser","localToken","emitLogin","handleDispatchCheck","falseCheckRedirect","valid","handleAdminCheck","check","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","RedirectService","SocketioService","ChatService","EditAccountService","UserDataService","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"./redirect.service\";\r\nimport * as i3 from \"./socketio.service\";\r\nimport * as i4 from \"./chat.service\";\r\nimport * as i5 from \"./edit-account.service\";\r\nimport * as i6 from \"./user-data.service\";\r\nexport class AuthService {\r\n    constructor(http, redirectService, socketioService, chatService, editAccountService, userDataService) {\r\n        this.http = http;\r\n        this.redirectService = redirectService;\r\n        this.socketioService = socketioService;\r\n        this.chatService = chatService;\r\n        this.editAccountService = editAccountService;\r\n        this.userDataService = userDataService;\r\n        this.api = 'http://localhost:3000/users'; // dev\r\n        // private api = 'users'; // production\r\n        this.httpOptions = {\r\n            headers: new HttpHeaders({\r\n                'Content-Type': 'application/json'\r\n            })\r\n        };\r\n        this.jwt = new JwtHelperService();\r\n    }\r\n    // =====================\r\n    // || Router Requests ||\r\n    // =====================\r\n    createUser(payload, token) {\r\n        const validateHeader = this.buildHeader(token);\r\n        return this.http.post(`${this.api}/create`, payload, validateHeader).pipe(catchError(err => of(err)));\r\n    }\r\n    ;\r\n    authenticateUser(payload) {\r\n        return this.http.post(`${this.api}/authenticate`, payload, this.httpOptions).pipe(catchError(err => of(err)));\r\n    }\r\n    ;\r\n    validateToken(token) {\r\n        const validateHeader = {\r\n            headers: new HttpHeaders({\r\n                'Authorization': `${token}`\r\n            })\r\n        };\r\n        return this.http.get(`${this.api}/verify-token`, validateHeader).pipe(catchError(err => of(err)));\r\n    }\r\n    ;\r\n    verifyAdmin(id, token) {\r\n        const validateHeader = this.buildHeader(token);\r\n        return this.http.post(`${this.api}/verify-admin`, id, validateHeader).pipe(catchError(err => of(err)));\r\n    }\r\n    ;\r\n    onLogout(id) {\r\n        return this.http.get(`${this.api}/logout?_id=${id}`).pipe(catchError(err => of(err)));\r\n    }\r\n    ;\r\n    // ======================\r\n    // || Helper Functions ||\r\n    // ======================\r\n    buildHeader(token) {\r\n        const validateHeader = {\r\n            headers: new HttpHeaders({\r\n                'Authorization': token,\r\n                'Content-Type': 'application/json'\r\n            })\r\n        };\r\n        return validateHeader;\r\n    }\r\n    ;\r\n    adminCheckParser(id, token) {\r\n        return new Promise(resolve => {\r\n            this.verifyAdmin({ _id: id }, token).subscribe(_status => {\r\n                if (_status.token)\r\n                    localStorage.setItem('id_token', _status.token);\r\n                return resolve(_status.status === 200 ? true : false);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    parseLocalStorageUser() {\r\n        let user = localStorage.getItem('user');\r\n        if (user) {\r\n            try {\r\n                user = JSON.parse(user);\r\n            }\r\n            catch (_a) {\r\n                user = null;\r\n            }\r\n            ;\r\n        }\r\n        ;\r\n        return user;\r\n    }\r\n    ;\r\n    compareToken(token) {\r\n        return new Promise(resolve => {\r\n            this.validateToken(token).subscribe(res => {\r\n                if (res.token)\r\n                    this.userDataService.changeAuthToken(res.token);\r\n                return resolve(res.status === 200 ? true : false);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    // ======================\r\n    // || Shared Functions ||\r\n    // ======================\r\n    setLocalStorageUser(token, user) {\r\n        localStorage.setItem('id_token', token);\r\n        localStorage.setItem('user', user);\r\n    }\r\n    ;\r\n    async isExpired(token, user) {\r\n        const expired = this.jwt.isTokenExpired(token);\r\n        if (!expired)\r\n            return expired;\r\n        const expiredCheck = await new Promise(resolve => {\r\n            const payload = {\r\n                user: user,\r\n                token: token\r\n            };\r\n            this.editAccountService.requestNewToken(payload).subscribe((res) => {\r\n                if (!res.success)\r\n                    return resolve(true);\r\n                this.userDataService.changeAuthToken(res.token);\r\n                return resolve(false);\r\n            });\r\n        });\r\n        return expiredCheck;\r\n    }\r\n    ;\r\n    logout(user) {\r\n        if (user) {\r\n            this.socketioService.emitLogout(user);\r\n            this.onLogout(user._id).subscribe(_user => { });\r\n        }\r\n        ;\r\n        this.chatService.changeOpenChats([]);\r\n        this.redirectService.handleRedirect('home');\r\n        this.userDataService.changeAuthToken(null);\r\n        this.userDataService.changeUserData(null);\r\n        localStorage.clear();\r\n    }\r\n    ;\r\n    onReload(user, token) {\r\n        if (user && token)\r\n            return;\r\n        const localUser = this.parseLocalStorageUser();\r\n        const localToken = localStorage.getItem('id_token');\r\n        if (localUser && localToken) {\r\n            this.userDataService.changeAuthToken(localStorage.getItem('id_token'));\r\n            this.userDataService.changeUserData(localUser);\r\n            this.socketioService.emitLogin(localUser);\r\n            return;\r\n        }\r\n        ;\r\n        this.logout(user);\r\n    }\r\n    ;\r\n    // =======================\r\n    // || Auth Guard Checks ||\r\n    // =======================\r\n    async handleDispatchCheck(token, user) {\r\n        if (!token)\r\n            return this.redirectService.falseCheckRedirect('home');\r\n        const valid = await this.compareToken(token);\r\n        const expired = await this.isExpired(token, user);\r\n        if (expired || !valid) {\r\n            this.logout(user);\r\n            return false;\r\n        }\r\n        ;\r\n        return true;\r\n    }\r\n    ;\r\n    async handleAdminCheck(token, user) {\r\n        if (!user || !token)\r\n            return this.redirectService.falseCheckRedirect('home');\r\n        if (typeof (user) === 'string')\r\n            user = JSON.parse(user);\r\n        const check = await this.adminCheckParser(user._id, token);\r\n        if (!check)\r\n            this.logout(user);\r\n        return check;\r\n    }\r\n    ;\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.RedirectService), i0.ɵɵinject(i3.SocketioService), i0.ɵɵinject(i4.ChatService), i0.ɵɵinject(i5.EditAccountService), i0.ɵɵinject(i6.UserDataService)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}